# Used on new generated characters
TOW_initialize_adult_character = {
	#log = "TOW_initialize_adult_character: TOW_initialize_character_race_from_culture for [This.GetBestName]."
	TOW_initialize_character_race_from_culture = yes
	TOW_update_character_race_from_liege = yes
	TOW_initialize_adult_character_religious_features = yes
	TOW_initialize_adult_character_portraits_features = yes
}

### New character assignement based on Culture

TOW_initialize_character_race_from_culture = {
	if = {
		limit = {
			has_character_flag = race_assigned
		}
		log = " -- TOW -- Warning: Trying to assign a race on a character ([This.GetTitledName]) who already has the race_assigned flag !"
	}

	trigger_switch = {
		on_trigger = culture_group
		
		human = { add_trait = race_human }
		orcish = {
			if = {
				limit = {
					OR = {
						NOT = { culture = twilights_hammer }
						has_global_flag = thirdwar_bookmark
						has_global_flag = wow_bookmark
						#Twilight's hammer was destroyed during second war, or at any point before
					}
				}
				add_trait = race_orc
				if = {
					limit = {
						culture = twilights_hammer
					}
					set_graphical_culture = bleeding_hollow # doesn't matter
					add_trait = race_gorc
				}
				if = {
					limit = { graphical_culture = rorcgfx }
					add_trait = race_rorc
				}
				if = {
					limit = { graphical_culture = borcgfx }
					add_trait = race_borc
				}
				if = {
					limit = { graphical_culture = morcgfx }
					add_trait = race_morc
				}
				if = {
					limit = { graphical_culture = dorcgfx }
					add_trait = race_dorc
				}
				if = {
					limit = { graphical_culture = worcgfx }
					add_trait = race_worc
				}
				if = {
					limit = { graphical_culture = gorcgfx }
					add_trait = race_gorc
				}
			}
			else = {
				add_trait = race_pale_orc
			}
		}
		dwarf = {
			add_trait = race_dwarf
			if = {
				limit = { graphical_culture = blackdwarfgfx }
				add_trait = race_blackdwarf
			}
		}
		gnome = { add_trait = race_gnome }
		goblin = { add_trait = race_goblin }
		ogre = { add_trait = race_ogre }
		murloc = { add_trait = race_murloc }
		gnoll = { add_trait = race_gnoll }
		kobold = { add_trait = race_kobold }
		trogg = { add_trait = race_trogg }
		vrykul = { add_trait = race_vrykul }
		tauren = { add_trait = race_tauren }
		worgen = {
			add_trait = race_worgen
			if = {
				limit = {
					NOT = { culture = terrowulf }
				}
				add_trait = race_human
			}
			if = {
				limit = {
					culture = terrowulf
				}
				add_trait = race_night_elf
			}
		}
	}
	trigger_switch = {
		on_trigger = culture
		
		high_elven = { add_trait = race_high_elf }
		blood_elven = { add_trait = race_blood_elf }
		night_elven = { add_trait = race_night_elf }
		naga = { add_trait = race_naga }
		felblood = {
			add_trait = race_blood_elf
			set_graphical_culture = felblood
			culture = blood_elven
			add_trait = fel_corrupted
		}
		wretched = {
			add_trait = race_wretched
			set_graphical_culture = race_wretched
			culture = blood_elven
		}
		red_dragonflight = { add_trait = race_dragon add_trait = race_reddragon }
		blue_dragonflight = { add_trait = race_dragon add_trait = race_bluedragon }
		bronze_dragonflight = { add_trait = race_dragon add_trait = race_bronzedragon }
		green_dragonflight = { add_trait = race_dragon add_trait = race_greendragon }
		black_dragonflight = { add_trait = race_dragon add_trait = race_blackdragon }
		chromatic_dragonflight = { add_trait = race_dragon }
		twilight_dragonflight = { add_trait = race_dragon }
		infinite_dragonflight = { add_trait = race_dragon add_trait = race_infinitedragon }
		nightmare_dragonflight = { add_trait = race_dragon add_trait = race_nightdragon }
		scourge = {
			add_trait = race_human
			add_trait = race_undead_scourge
		}
		forsaken = {
			add_trait = race_human
			add_trait = race_undead_forsaken
		}
		amani = { add_trait = race_troll_forest }
		atalai = { add_trait = race_troll_jungle }
		razorbranch = { add_trait = race_troll_jungle }
		firetree = { add_trait = race_troll_forest }
		mossflayer = { add_trait = race_troll_forest }
		revantusk = { add_trait = race_troll_forest }
		vilebranch = { add_trait = race_troll_forest }
		shadowpine = { add_trait = race_troll_forest }
		witherbark = { add_trait = race_troll_forest }
		bloodscalp = { add_trait = race_troll_jungle }
		darkspear = { add_trait = race_troll_jungle }
		gurubashi = { add_trait = race_troll_jungle }
		shatterspear = { add_trait = race_troll_jungle }
		skullsplitter = { add_trait = race_troll_jungle }
		zulian = { add_trait = race_troll_jungle }
		razzashi = { add_trait = race_troll_jungle }
		drakkari = { add_trait = race_troll_ice }
		frostmane = { add_trait = race_troll_ice }
		sandfury = { add_trait = race_troll_sand }
		smolderthorn = { add_trait = race_troll_forest }
		shadowglen = { add_trait = race_troll_forest }
		winterax = { add_trait = race_troll_ice }
		winterfang = { add_trait = race_troll_ice }
		shadowtooth = { add_trait = race_troll_dark }
		zandalari = { add_trait = race_troll_zandalari }
		demonic = {
			TOW_add_ai_refusal_flags = yes
			random_list = {
				1 = {
					add_trait = race_eredar
				}
				1 = {
					modifier = { factor = 0 is_female = yes }
					add_trait = race_dreadlord
				}
				1 = {
					modifier = { factor = 0 is_female = yes }
					add_trait = race_doomlord
				}
				1 = {
					modifier = { factor = 10 martial = 14 }
					modifier = { factor = 0 is_female = yes }
					add_trait = race_pit_lord
				}
				1 = {
					modifier = { factor = 0 NOT = { stewardship = 9 } }  # Will need tweaking
					modifier = { factor = 0 is_female = yes }
					add_trait = race_fel_lord
				}
				1 = {
					modifier = { factor = 0 is_female = yes }
					add_trait = race_mo_arg
				}
				1 = {
					modifier = { factor = 0 is_female = yes }
					add_trait = race_antaen
				}
				1 = {
					modifier = { factor = 10 intrigue = 14 }
					modifier = { factor = 0 is_female = yes }
					add_trait = race_inquisitor
				}
				1 = {
					modifier = { factor = 10 learning = 14 }
					modifier = { factor = 0 is_female = yes }
					add_trait = race_observer
				}
				1 = {
					modifier = { factor = 10 intrigue = 14 }
					modifier = { factor = 0 is_female = no }
					add_trait = race_succubus
				}
				1 = {
					modifier = { factor = 10 learning = 14 }
					modifier = { factor = 0 is_female = no }
					add_trait = race_shivarra
				}
				1 = {
					modifier = { factor = 10 martial = 14 }
					modifier = { factor = 0 is_female = no }
					add_trait = race_aranasi
				}
			}
		}
		eredar = { add_trait = race_eredar TOW_add_ai_refusal_flags = yes }
		nathrezim = { add_trait = race_dreadlord TOW_add_ai_refusal_flags = yes }
		sayaad = { add_trait = race_succubus TOW_add_ai_refusal_flags = yes }
		ered_ruin = { add_trait = race_doomlord TOW_add_ai_refusal_flags = yes }
		annihilan = { add_trait = race_pit_lord TOW_add_ai_refusal_flags = yes } 
		mo_arg = {
			if = {
				limit = {
					NOT = { stewardship = 9 } # Will need tweaking
				}
				add_trait = race_fel_lord
				TOW_add_ai_refusal_flags = yes
			}
			else = {
				add_trait = race_mo_arg
				TOW_add_ai_refusal_flags = yes
			}
		}
		shivarra = { add_trait = race_shivarra TOW_add_ai_refusal_flags = yes }
		antaen = { add_trait = race_antaen TOW_add_ai_refusal_flags = yes }
		aranasi = { add_trait = race_aranasi TOW_add_ai_refusal_flags = yes }
		inquisitor = { add_trait = race_inquisitor TOW_add_ai_refusal_flags = yes }
		observer = { add_trait = race_observer TOW_add_ai_refusal_flags = yes }
		draenei = { add_trait = race_draenei }
		#broken = { add_trait = race_broken }
		lost_one = { add_trait = race_lost_one }
		nraqi = { add_trait = race_faceless }
		voidwalker = { add_trait = race_voidwalker }
		air_elemental = { add_trait = race_air_elemental }
		earth_elemental = { add_trait = race_earth_elemental }
		fire_elemental = { add_trait = race_fire_elemental }
		water_elemental = { add_trait = race_water_elemental }
	}

	if = {
		limit = {
			TOW_has_race = no
		}
		log = " -- TOW -- : TOW_initialize_character_race_from_culture failed. Character: [This.GetID] ([This.GetBestName]). Culture: [This.Culture.GetName]."
	}
	else = {
		set_character_flag = race_assigned
	}
}

TOW_add_ai_refusal_flags = {
	set_character_flag = no_court_invites
	set_character_flag = ai_flag_refuse_marriage
	set_character_flag = ai_flag_refuse_concubinage
}

TOW_update_character_race_from_liege = {
	if = {
		limit = { trait = race_orc }
	
		if = {
			limit = {
				liege = {
					graphical_culture = borcgfx
				}
			}
			random_list = {
				1 = {
					set_graphical_culture = mag_har
				}
				10 = { # Set a modifier to make this 0 if in Draenor/Outland
					set_graphical_culture = bleeding_hollow # doesn't matter
				}
			}
		}
		else_if = {
			limit = {
				liege = {
					graphical_culture = rorcgfx
				}
				OR = {
					religion = burning_legion
					religion = demonology
				}
			}
			random_list = {
				1 = {
					set_graphical_culture = fel_orc
					random_list = {
						1 = {
							add_trait = fel_corrupted
						}
						4 = {
							add_trait = fel_tainted
						}
					}
				}
				1 = { # Set a modifier to make this 0 if in Outland
					set_graphical_culture = bleeding_hollow # shouldn't matter
					random_list = {
						1 = {
							add_trait = fel_tainted
						}
						4 = {
							add_trait = fel_touched
						}
					}
				}
			}
		}
	}


	if = {
		limit = { 
			OR = {
				trait = race_high_elf
				trait = race_blood_elf
			}
			liege = {
				graphical_culture = welvengfx
				trait = race_wretched
			}
		}
		set_graphical_culture = wretched
		remove_trait = race_high_elf
		remove_trait = race_blood_elf
		add_trait = race_wretched
	}
}

# Used on new characters
TOW_initialize_adult_character_portraits_features = {
	if = { # Night elf female tattoo
		limit = { TOW_can_have_female_night_elf_tattoo = yes }
		TOW_female_night_elf_assign_random_tattoo_depending_on_traits = yes
	}
}

TOW_initialize_adult_character_religious_features = {
	hidden_tooltip = {
		if = {
			limit = {
				TOW_religion_practices_astrology = yes
			}
			add_western_zodiac_trait_effect = yes
		}
		if = {
			limit = {
				TOW_religion_has_pagan_branches = yes
			}
			random_list = {  
				5 = {
					add_trait = pagan_branch_1
				}
				25 = {
					add_trait = pagan_branch_2
				}
				25 = {
					add_trait = pagan_branch_3
				}
				25 = {
					add_trait = pagan_branch_4
				}
			}
		}
	}
}

TOW_initialize_character_race_from_parents = {
	#First same-trait pairings
	if = {
		limit = {
			mother = {
				trait = race_human
			}
			true_father = {
				trait = race_human
			}
		}
		set_character_flag = race_assigned
		add_trait = race_human
	}
	if = {
		limit = {
			mother = {
				trait = race_high_elf
			}
			true_father = {
				trait = race_high_elf
			}
		}
		set_character_flag = race_assigned
		add_trait = race_high_elf
	}
	if = {
		limit = {
			mother = {
				trait = race_blood_elf
			}
			true_father = {
				trait = race_blood_elf
			}
		}
		set_character_flag = race_assigned
		add_trait = race_blood_elf
	}
	if = {
		limit = {
			mother = {
				trait = race_wretched
			}
			true_father = {
				trait = race_wretched
			}
		}
		set_character_flag = race_assigned
		add_trait = race_wretched
	}
	if = {
		limit = {
			mother = {
				trait = race_gnome
			}
			true_father = {
				trait = race_gnome
			}
		}
		set_character_flag = race_assigned
		add_trait = race_gnome
	}
	if = {
		limit = {
			mother = {
				trait = race_goblin
			}
			true_father = {
				trait = race_goblin
			}
		}
		set_character_flag = race_assigned
		add_trait = race_goblin
	}
	#Trolls are handled down in the crossbreed section
	if = {
		limit = {
			mother = {
				trait = race_ogre
			}
			true_father = {
				trait = race_ogre
			}
		}
		set_character_flag = race_assigned
		add_trait = race_ogre
	}
	if = {
		limit = {
			mother = {
				trait = race_murloc
			}
			true_father = {
				trait = race_murloc
			}
		}
		set_character_flag = race_assigned
		add_trait = race_murloc
	}
	if = {
		limit = {
			mother = {
				trait = race_gnoll
			}
			true_father = {
				trait = race_gnoll
			}
		}
		set_character_flag = race_assigned
		add_trait = race_gnoll
	}
	if = {
		limit = {
			mother = {
				trait = race_naga
			}
			true_father = {
				trait = race_naga
			}
		}
		set_character_flag = race_assigned
		add_trait = race_naga
	}
	if = {
		limit = {
			mother = {
				trait = race_trogg
			}
			true_father = {
				trait = race_trogg
			}
		}
		set_character_flag = race_assigned
		add_trait = race_trogg
	}
	if = {
		limit = {
			mother = {
				trait = race_kobold
			}
			true_father = {
				trait = race_kobold
			}
		}
		set_character_flag = race_assigned
		add_trait = race_kobold
	}
	if = {
		limit = {
			mother = {
				trait = race_draenei
			}
			true_father = {
				trait = race_draenei
			}
		}
		set_character_flag = race_assigned
		add_trait = race_draenei
	}
	if = {
		limit = {
			mother = {
				trait = race_broken
			}
			true_father = {
				trait = race_broken
			}
		}
		set_character_flag = race_assigned
		add_trait = race_broken
	}
	if = {
		limit = {
			mother = {
				trait = race_lost_one
			}
			true_father = {
				trait = race_lost_one
			}
		}
		set_character_flag = race_assigned
		add_trait = race_lost_one
	}
	if = {
		limit = {
			mother = {
				trait = race_pale_orc
			}
			true_father = {
				trait = race_pale_orc
			}
		}
		set_character_flag = race_assigned
		add_trait = race_pale_orc
	}
	if = {
		limit = {
			mother = {
				trait = race_tauren
			}
			true_father = {
				trait = race_tauren
			}
		}
		set_character_flag = race_assigned
		add_trait = race_tauren
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_wretched
					}
					true_father = {
						trait = race_high_elf
					}
				}
				AND = {
					mother = {
						trait = race_high_elf
					}
					true_father = {
						trait = race_wretched
					}
				}
			}
		}
		set_character_flag = race_assigned
		add_trait = race_high_elf
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						OR = {
							trait = race_high_elf
							trait = race_wretched
						}
					}
					true_father = {
						trait = race_blood_elf
					}
				}
				AND = {
					mother = {
						trait = race_blood_elf
					}
					true_father = {
						OR = {
							trait = race_high_elf
							trait = race_wretched
						}
					}
				}
			}
		}
		set_character_flag = race_assigned
		add_trait = race_blood_elf
	}
	if = {
		limit = {
			mother = {
				trait = race_half_elf
			}
			true_father = {
				trait = race_half_elf
			}
		}
		set_character_flag = race_assigned
		add_trait = race_half_elf
		random_list = {
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOR = {
							has_character_flag = half_high_elf
							has_character_flag = quarter_high_elf
						}
					}
					true_father = {
						NOR = {
							has_character_flag = half_high_elf
							has_character_flag = quarter_high_elf
						}
					}
				}
				set_character_flag = half_high_elf
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOR = {
							has_character_flag = half_blood_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						NOR = {
							has_character_flag = half_blood_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
				set_character_flag = half_blood_elf
			}
		}
	}
	if = {
		limit = {
			mother = {
				trait = race_half_draenei
			}
			true_father = {
				trait = race_half_draenei
			}
		}
		set_character_flag = race_assigned
		add_trait = race_half_draenei
	}
	if = {
		limit = {
			mother = {
				trait = race_half_ogre
			}
			true_father = {
				trait = race_half_ogre
			}
		}
		set_character_flag = race_assigned
		add_trait = race_half_ogre
	}
	# For the few race traits with multiple GFXes
	if = {
		limit = {
			mother = {
				trait = race_orc
			}
			true_father = {
				trait = race_orc
			}
		}
		set_character_flag = race_assigned
		add_trait = race_orc
		random_list = {
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = rorcgfx }
					}
					true_father = {
						NOT = { graphical_culture = rorcgfx }
					}
				}
				set_graphical_culture = fel_orc
				add_trait = race_rorc
			 }
		 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = morcgfx }
					}
					true_father = {
						NOT = { graphical_culture = morcgfx }
					}
				}
				set_graphical_culture = mok_nathal
				add_trait = race_morc
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = borcgfx }
					}
					true_father = {
						NOT = { graphical_culture = borcgfx }
					}
				}
				set_graphical_culture = mag_har
				add_trait = race_borc
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = dorcgfx }
					}
					true_father = {
						NOT = { graphical_culture = dorcgfx }
					}
				}
				set_graphical_culture = blackrock
				add_trait = race_dorc
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = worcgfx }
					}
					true_father = {
						NOT = { graphical_culture = worcgfx }
					}
				}
				set_graphical_culture = shattered_hand
				add_trait = race_worc
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = gorcgfx }
					}
					true_father = {
						NOT = { graphical_culture = gorcgfx }
					}
				}
				set_graphical_culture = twilights_hammer
				add_trait = race_gorc
			 }
			 # Add more as needed
		}
	}
	if = {
		limit = {
			mother = {
				trait = race_dwarf
			}
			true_father = {
				trait = race_dwarf
			}
		}
		set_character_flag = race_assigned
		add_trait = race_dwarf
		random_list = {
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = bronzebeardgfx }
					}
					true_father = {
						NOT = { graphical_culture = bronzebeardgfx }
					}
				}
				set_graphical_culture = bronzebeard
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = blackdwarfgfx }
					}
					true_father = {
						NOT = { graphical_culture = blackdwarfgfx }
					}
				}
				set_graphical_culture = dark_iron
				add_trait = race_blackdwarf
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = wilddwarfgfx }
					}
					true_father = {
						NOT = { graphical_culture = wilddwarfgfx }
					}
				}
				set_graphical_culture = wildhammer
			 }
		}
	}
	if = {
		limit = {
			mother = {
				trait = race_dragon
			}
			true_father = {
				trait = race_dragon
			}
		}
		set_character_flag = race_assigned
		add_trait = race_dragon
		random_list = {
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = bronzedragongfx }
					}
					true_father = {
						NOT = { graphical_culture = bronzedragongfx }
					}
				}
				set_graphical_culture = bronze_dragonflight
				add_trait = race_bronzedragon
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = reddragongfx }
					}
					true_father = {
						NOT = { graphical_culture = reddragongfx }
					}
				}
				set_graphical_culture = red_dragonflight
				add_trait = race_reddragon
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = blackdragongfx }
					}
					true_father = {
						NOT = { graphical_culture = blackdragongfx }
					}
				}
				set_graphical_culture = black_dragonflight
				add_trait = race_blackdragon
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = bluedragongfx }
					}
					true_father = {
						NOT = { graphical_culture = bluedragongfx }
					}
				}
				set_graphical_culture = blue_dragonflight
				add_trait = race_bluedragon
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = greendragongfx }
					}
					true_father = {
						NOT = { graphical_culture = greendragongfx }
					}
				}
				set_graphical_culture = green_dragonflight
				add_trait = race_greendragon
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = infinitedragongfx }
					}
					true_father = {
						NOT = { graphical_culture = infinitedragongfx }
					}
				}
				set_graphical_culture = infinite_dragonflight
				add_trait = race_infinitedragon
			 }
			 1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { graphical_culture = nightdragongfx }
					}
					true_father = {
						NOT = { graphical_culture = nightdragongfx }
					}
				}
				set_graphical_culture = nightmare_dragonflight
				add_trait = race_nightdragon
			 }
			 # Add more as needed
		}
	}
	#For crossbreeds and the cases with sub-races
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_human
					}
					true_father = {
						TOW_race_pregnancy_is_human_compatible = yes
					}
				}
				AND = {
					true_father = {
						trait = race_human
					}
					mother = {
						TOW_race_pregnancy_is_human_compatible = yes
					}
				}
			}
		}
		set_character_flag = race_assigned
		add_trait = race_half_elf
		if = {
			limit = {
				OR = {
					mother = {
						OR = {
							trait = race_high_elf
							AND = {
								trait = race_wretched
								culture = high_elven
							}
						}
					}
					true_father = {
						OR = {
							trait = race_high_elf
							AND = {
								trait = race_wretched
								culture = high_elven
							}
						}
					}
				}
			}
			set_character_flag = half_high_elf
		}
		if = {
			limit = {
				OR = {
					mother = {
						OR = {
							trait = race_blood_elf
							AND = {
								trait = race_wretched
								culture = blood_elven
							}
						}
					}
					true_father = {
						OR = {
							trait = race_blood_elf
							AND = {
								trait = race_wretched
								culture = blood_elven
							}
						}
					}
				}
			}
			set_character_flag = half_blood_elf
		}
		#Add GFX when it is done
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_half_elf
					}
					true_father = {
						trait = race_human
					}
				}
				AND = {
					true_father = {
						trait = race_half_elf
					}
					mother = {
						trait = race_human
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						OR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						OR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_human
			set_graphical_culture = humangfx
		}
		if = {
			limit = {
				OR = {
					mother = {
						NOR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						NOR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_half_elf
			if = {
				limit = {
					OR = {
						mother = {
							has_character_flag = half_high_elf
						}
						true_father = {
							has_character_flag = half_high_elf
						}
					} 
				}
				set_character_flag = quarter_high_elf
			}
			if = {
				limit = {
					OR = {
						mother = {
							has_character_flag = half_blood_elf
						}
						true_father = {
							has_character_flag = half_blood_elf
						}
					} 
				}
				set_character_flag = quarter_blood_elf
			}
			#Add the GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_half_elf
					}
					true_father = {
						trait = race_high_elf
					}
				}
				AND = {
					true_father = {
						trait = race_half_elf
					}
					mother = {
						trait = race_high_elf
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						OR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						OR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_high_elf
			set_graphical_culture = helvengfx
		}
		if = {
			limit = {
				OR = {
					mother = {
						NOR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						NOR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_half_elf
			set_character_flag = quarter_high_elf
			#Add the GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_half_elf
					}
					true_father = {
						trait = race_blood_elf
					}
				}
				AND = {
					true_father = {
						trait = race_half_elf
					}
					mother = {
						trait = race_blood_elf
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						OR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						OR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_blood_elf
			set_graphical_culture = belvengfx
		}
		if = {
			limit = {
				OR = {
					mother = {
						NOR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
					true_father = {
						NOR = {
							has_character_flag = quarter_high_elf
							has_character_flag = quarter_blood_elf
						}
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_blood_elf
			set_character_flag = quarter_blood_elf
			#Add the GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_orc
					}
					true_father = {
						trait = race_ogre
					}
				}
				AND = {
					mother = {
						trait = race_ogre
					}
					true_father = {
						trait = race_orc
					}
				}
			}
		}
		set_character_flag = race_assigned
		add_trait = race_half_ogre
		#Add GFX later
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_orc
					}
					true_father = {
						trait = race_half_ogre
					}
				}
				AND = {
					mother = {
						trait = race_half_ogre
					}
					true_father = {
						trait = race_orc
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						has_character_flag = quarter_orc
					}
					true_father = {
						has_character_flag = quarter_orc
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_orc
			if = {
				limit = {
					true_father = {
						has_character_flag = quarter_orc
					}
				}
				true_father = {
					PREV = {
						set_graphical_culture = PREV
					}
				}
			}
			if = { # In this order so mother will be the overriding one
				limit = {
					mother = {
						has_character_flag = quarter_orc
					}
				}
				mother = {
					PREV = {
						set_graphical_culture = PREV
					}
				}
			}
		}
		if = {
			limit = {
				mother = {
					NOT = { has_character_flag = quarter_orc }
				}
				true_father = {
					NOT = { has_character_flag = quarter_orc }
				}
			}
			set_character_flag = race_assigned
			add_trait = race_half_ogre
			set_character_flag = quarter_orc
			#Add GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_ogre
					}
					true_father = {
						trait = race_half_ogre
					}
				}
				AND = {
					mother = {
						trait = race_half_ogre
					}
					true_father = {
						trait = race_ogre
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						has_character_flag = quarter_ogre
					}
					true_father = {
						has_character_flag = quarter_ogre
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_ogre
			set_graphical_culture = boulderfist # All of them use the same GFX, so doesn't matter
		}
		if = {
			limit = {
				mother = {
					NOT = { has_character_flag = quarter_ogre }
				}
				true_father = {
					NOT = { has_character_flag = quarter_ogre }
				}
			}
			set_character_flag = race_assigned
			add_trait = race_half_ogre
			set_character_flag = quarter_ogre
			#Add GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_orc
					}
					true_father = {
						OR = {
							trait = race_draenei
							trait = race_broken
							trait = race_lost_one
						}
					}
				}
				AND = {
					mother = {
						OR = {
							trait = race_draenei
							trait = race_broken
							trait = race_lost_one
						}
					}
					true_father = {
						trait = race_orc
					}
				}
			}
		}
		set_character_flag = race_assigned
		add_trait = race_half_draenei
		#Add GFX later
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_orc
					}
					true_father = {
						trait = race_half_draenei
					}
				}
				AND = {
					mother = {
						trait = race_half_draenei
					}
					true_father = {
						trait = race_orc
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						has_character_flag = quarter_orc
					}
					true_father = {
						has_character_flag = quarter_orc
					}
				}
			}
			set_character_flag = race_assigned
			add_trait = race_orc
			if = {
				limit = {
					true_father = {
						has_character_flag = quarter_orc
					}
				}
				true_father = {
					PREV = {
						set_graphical_culture = PREV
					}
				}
			}
			if = { # In this order so mother will be the overriding one
				limit = {
					mother = {
						has_character_flag = quarter_orc
					}
				}
				mother = {
					PREV = {
						set_graphical_culture = PREV
					}
				}
			}
		}
		if = {
			limit = {
				mother = {
					NOT = { has_character_flag = quarter_orc }
				}
				true_father = {
					NOT = { has_character_flag = quarter_orc }
				}
			}
			set_character_flag = race_assigned
			add_trait = race_half_draenei
			set_character_flag = quarter_orc
			#Add GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						OR = {
							trait = race_draenei
							trait = race_broken
							trait = race_lost_one
						}
					}
					true_father = {
						trait = race_half_draenei
					}
				}
				AND = {
					mother = {
						trait = race_half_draenei
					}
					true_father = {
						OR = {
							trait = race_draenei
							trait = race_broken
							trait = race_lost_one
						}
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						has_character_flag = quarter_draenei
					}
					true_father = {
						has_character_flag = quarter_draenei
					}
				}
			}
			if = {
				limit = {
					OR = {
						mother = {
							trait = race_draenei
						}
						true_father = {
							trait = race_draenei
						}
					}
				}
				set_character_flag = race_assigned
				add_trait = race_draenei
				#Add GFX later
			}
			if = {
				limit = {
					OR = {
						mother = {
							trait = race_broken
						}
						true_father = {
							trait = race_broken
						}
					}
				}
				set_character_flag = race_assigned
				add_trait = race_broken
				#Add GFX later
			}
			if = {
				limit = {
					OR = {
						mother = {
							trait = race_lost_one
						}
						true_father = {
							trait = race_lost_one
						}
					}
				}
				set_character_flag = race_assigned
				add_trait = race_draenei
				#Add GFX later
			}
		}
		if = {
			limit = {
				mother = {
					NOT = { has_character_flag = quarter_draenei }
				}
				true_father = {
					NOT = { has_character_flag = quarter_draenei }
				}
			}
			set_character_flag = race_assigned
			add_trait = race_half_draenei
			set_character_flag = quarter_draenei
			#Add GFX later
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_draenei
					}
					true_father = {
						trait = race_broken
					}
				}
				AND = {
					true_father = {
						trait = race_draenei
					}
					mother = {
						trait = race_broken
					}
				}
			}
		}
		random_list = {
			1 = {
				set_character_flag = race_assigned
				add_trait = race_draenei
				#Add GFX later
			}
			1 = {
				set_character_flag = race_assigned
				add_trait = race_broken
				#Add GFX later
			}
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_lost_one
					}
					true_father = {
						trait = race_broken
					}
				}
				AND = {
					true_father = {
						trait = race_lost_one
					}
					mother = {
						trait = race_broken
					}
				}
			}
		}
		random_list = {
			1 = {
				set_character_flag = race_assigned
				add_trait = race_lost_one
				#Add GFX later
			}
			1 = {
				set_character_flag = race_assigned
				add_trait = race_broken
				#Add GFX later
			}
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_draenei
					}
					true_father = {
						trait = race_lost_one
					}
				}
				AND = {
					true_father = {
						trait = race_draenei
					}
					mother = {
						trait = race_lost_one
					}
				}
			}
		}
		set_character_flag = race_assigned
		add_trait = race_broken
		#Add GFX later
	}
	if = {
		limit = {
			mother = {
				OR = {
					trait = race_troll_forest
					trait = race_troll_ice
					trait = race_troll_dark
					trait = race_troll_jungle
					trait = race_troll_sand
					trait = race_troll_zandalari
				}
			}
			true_father = {
				OR = {
					trait = race_troll_forest
					trait = race_troll_ice
					trait = race_troll_dark
					trait = race_troll_jungle
					trait = race_troll_sand
					trait = race_troll_zandalari
				}
			}
		}
		random_list = {
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { trait = race_troll_forest }
					}
					true_father = {
						NOT = { trait = race_troll_forest }
					}
				}
				set_character_flag = race_assigned
				add_trait = race_troll_forest
				set_graphical_culture = amani
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { trait = race_troll_ice }
					}
					true_father = {
						NOT = { trait = race_troll_ice }
					}
				}
				set_character_flag = race_assigned
				add_trait = race_troll_ice
				set_graphical_culture = drakkari
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { trait = race_troll_dark }
					}
					true_father = {
						NOT = { trait = race_troll_dark }
					}
				}
				set_character_flag = race_assigned
				add_trait = race_troll_dark
				set_graphical_culture = shadowtooth
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { trait = race_troll_jungle }
					}
					true_father = {
						NOT = { trait = race_troll_jungle }
					}
				}
				set_character_flag = race_assigned
				add_trait = race_troll_jungle
				set_graphical_culture = gurubashi
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { trait = race_troll_sand }
					}
					true_father = {
						NOT = { trait = race_troll_sand }
					}
				}
				set_character_flag = race_assigned
				add_trait = race_troll_sand
				set_graphical_culture = sandfury
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOT = { trait = race_troll_zandalari }
					}
					true_father = {
						NOT = { trait = race_troll_zandalari }
					}
				}
				set_character_flag = race_assigned
				add_trait = race_troll_zandalari
				set_graphical_culture = zandalari
			}
		}
	}
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_orc
					}
					true_father = {
						trait = race_pale_orc
					}
				}
				AND = {
					true_father = {
						trait = race_orc
					}
					mother = {
						trait = race_pale_orc
					}
				}
			}
		}
		random_list = {
			1 = {
				set_character_flag = race_assigned
				add_trait = race_orc
				if = {
					limit = {
						true_father = {
							trait = race_orc
						}
					}
					true_father = {
						PREV = {
							set_graphical_culture = PREV
						}
					}
				}
				if = {
					limit = {
						mother = {
							trait = race_orc
						}
					}
					mother = {
						PREV = {
							set_graphical_culture = PREV
						}
					}
				}
			}
			1 = {
				set_character_flag = race_assigned
				add_trait = race_pale_orc
				if = {
					limit = {
						true_father = {
							trait = race_pale_orc
						}
					}
					true_father = {
						PREV = {
							set_graphical_culture = PREV
						}
					}
				}
				if = {
					limit = {
						mother = {
							trait = race_pale_orc
						}
					}
					mother = {
						PREV = {
							set_graphical_culture = PREV
						}
					}
				}
			}
		}
	}
	#If both parents are corrupted
	if = {
		limit = {
			mother = {
				OR = {
					trait = fel_touched
					trait = fel_tainted
					trait = fel_corrupted
					trait = felsworn
				}
			}
			true_father = {
				OR = {
					trait = fel_touched
					trait = fel_tainted
					trait = fel_corrupted
					trait = felsworn
				}
			}
		}
		random_list = {
			1 = {
				modifier = {
					factor = 0
					OR = {
						AND = {
							mother = {
								trait = fel_touched
							}
							true_father = {
								OR = {
									trait = fel_tainted
									trait = fel_corrupted
									trait = felsworn
								}
							}
						}
						AND = {
							mother = {
								OR = {
									trait = fel_tainted
									trait = fel_corrupted
									trait = felsworn
								}
							}
							true_father = {
								trait = fel_touched
							}
						}
						AND = {
							mother = {
								OR = {
									trait = fel_tainted
									trait = fel_corrupted
									trait = felsworn
								}
							}
							true_father = {
								OR = {
									trait = fel_tainted
									trait = fel_corrupted
									trait = felsworn
								}
							}
						}
					}
				}
				add_trait = fel_traces
			}
			1 = {
				modifier = {
					factor = 0
					OR = {
						AND = {
							mother = {
								trait = fel_tainted
							}
							true_father = {
								OR = {
									trait = fel_corrupted
									trait = felsworn
								}
							}
						}
						AND = {
							mother = {
								OR = {
									trait = fel_corrupted
									trait = felsworn
								}
							}
							true_father = {
								trait = fel_tainted
							}
						}
						AND = {
							mother = {
								OR = {
									trait = fel_corrupted
									trait = felsworn
								}
							}
							true_father = {
								OR = {
									trait = fel_corrupted
									trait = felsworn
								}
							}
						}
					}
				}
				add_trait = fel_touched
				trigger_switch = {
					on_trigger = trait
					race_high_elf = {
						set_graphical_culture = blood_elven
					}
				}
			}
			1 = {
				modifier = {
					factor = 0
					mother = {
						NOR = {
							trait = fel_tainted
							trait = fel_corrupted
							trait = felsworn
						}
					}
					true_father = {
						NOR = {
							trait = fel_tainted
							trait = fel_corrupted
							trait = felsworn
						}
					}
				}
				add_trait = fel_tainted
				trigger_switch = {
					on_trigger = trait
					race_high_elf = {
						set_graphical_culture = blood_elven
					}
				}
			}
		}
	}
	#If one parent is corrupted
	if = {
		limit = {
			OR = {
				mother = {
					OR = {
						trait = fel_touched
						trait = fel_tainted
						trait = fel_corrupted
						trait = felsworn
					}
				}
				true_father = {
					OR = {
						trait = fel_touched
						trait = fel_tainted
						trait = fel_corrupted
						trait = felsworn
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						trait = fel_touched
					}
					true_father = {
						trait = fel_touched
					}
				}
			}
			random_list = {
				1 = {
					#nothing
				}
				1 = {
					add_trait = fel_traces
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						trait = fel_tainted
					}
				}
				OR = {
					father = {
						trait = fel_tainted
					}
				}
			}
			random_list = {
				1 = {
					add_trait = fel_traces
				}
				1 = {
					add_trait = fel_touched
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						trait = fel_corrupted
					}
				}
				OR = {
					father = {
						trait = fel_corrupted
					}
				}
			}
			random_list = {
				1 = {
					add_trait = fel_touched
				}
				1 = {
					add_trait = fel_tainted
					trigger_switch = {
						on_trigger = trait
						race_high_elf = {
							set_graphical_culture = blood_elven
						}
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					mother = {
						trait = felsworn
					}
				}
				OR = {
					father = {
						trait = felsworn
					}
				}
			}
			add_trait = fel_tainted
			trigger_switch = {
				on_trigger = trait
				race_high_elf = {
					set_graphical_culture = blood_elven
				}
			}
		}
	}
	#Worgen handling
	##If both parents are worgen
	if = {
		limit = {
			mother = {
				trait = race_worgen
			}
			true_father = {
				trait = race_worgen
			}
		}
		add_trait = race_worgen
	}
	##If only one of them is a furry
	if = {
		limit = {
			OR = {
				AND = {
					mother = {
						trait = race_worgen
					}
					true_father = {
						NOT = { trait = race_worgen }
					}
				}
				AND = {
					mother = {
						NOT = { trait = race_worgen }
					}
					true_father = {
						trait = race_worgen
					}
				}
			}
		}
		random = {
			chance = 50
			add_trait = race_worgen
		}
	}
	# In case the flag hasn't been assigned
	if = {
		limit = {
			NOT = { has_character_flag = race_assigned }
		}
		log = " -- TOW -- : TOW_initialize_character_race_from_parents: Failed for [This.GetBestName]."
		true_father = { log = " -- TOW -- : True Father Race : [This.TOW_GetFullRace]" }
		mother = { log = " -- TOW -- : Mother Race : [This.TOW_GetFullRace]" }
	}
}

TOW_initialize_character_race_from_mother = {
	#First same-trait pairings
	if = {
		limit = { mother = { trait = race_human } }
		set_character_flag = race_assigned
		add_trait = race_human
	}
	if = {
		limit = { mother = { trait = race_high_elf } }
		set_character_flag = race_assigned
		add_trait = race_high_elf
	}
	if = {
		limit = { mother = { trait = race_blood_elf } }
		set_character_flag = race_assigned
		add_trait = race_blood_elf
	}
	if = {
		limit = { mother = { trait = race_wretched } }
		set_character_flag = race_assigned
		add_trait = race_wretched
	}
	if = {
		limit = { mother = { trait = race_gnome } }
		set_character_flag = race_assigned
		add_trait = race_gnome
	}
	if = {
		limit = { mother = { trait = race_goblin } }
		set_character_flag = race_assigned
		add_trait = race_goblin
	}
	if = {
		limit = { mother = { trait = race_troll_jungle } }
		set_character_flag = race_assigned
		add_trait = race_troll_jungle
	}
	if = {
		limit = { mother = { trait = race_troll_forest } }
		set_character_flag = race_assigned
		add_trait = race_troll_forest
	}
	if = {
		limit = { mother = { trait = race_troll_ice } }
		set_character_flag = race_assigned
		add_trait = race_troll_ice
	}
	if = {
		limit = { mother = { trait = race_troll_sand } }
		set_character_flag = race_assigned
		add_trait = race_troll_sand
	}
	if = {
		limit = { mother = { trait = race_troll_dark } }
		set_character_flag = race_assigned
		add_trait = race_troll_dark
	}
	if = {
		limit = { mother = { trait = race_troll_zandalari } }
		set_character_flag = race_assigned
		add_trait = race_troll_zandalari
	}
	if = {
		limit = { mother = { trait = race_ogre } }
		set_character_flag = race_assigned
		add_trait = race_ogre
	}
	if = {
		limit = { mother = { trait = race_murloc } }
		set_character_flag = race_assigned
		add_trait = race_murloc
	}
	if = {
		limit = { mother = { trait = race_gnoll } }
		set_character_flag = race_assigned
		add_trait = race_gnoll
	}
	if = {
		limit = { mother = { trait = race_naga } }
		set_character_flag = race_assigned
		add_trait = race_naga
	}
	if = {
		limit = { mother = { trait = race_trogg } }
		set_character_flag = race_assigned
		add_trait = race_trogg
	}
	if = {
		limit = { mother = { trait = race_kobold } }
		set_character_flag = race_assigned
		add_trait = race_kobold
	}
	if = {
		limit = { mother = { trait = race_draenei } }
		set_character_flag = race_assigned
		add_trait = race_draenei
	}
	if = {
		limit = { mother = { trait = race_broken } }
		set_character_flag = race_assigned
		add_trait = race_broken
	}
	if = {
		limit = { mother = { trait = race_lost_one } }
		set_character_flag = race_assigned
		add_trait = race_lost_one
	}
	if = {
		limit = { mother = { trait = race_pale_orc } }
		set_character_flag = race_assigned
		add_trait = race_pale_orc
	}
	if = {
		limit = { mother = { trait = race_half_elf } }
		set_character_flag = race_assigned
		add_trait = race_half_elf
		if = {
			limit = { mother = { has_character_flag = half_high_elf } }
			set_character_flag = half_high_elf
		}
		if = {
			limit = { mother = { has_character_flag = half_blood_elf } }
			set_character_flag = half_blood_elf
		}
		if = {
			limit = { mother = { has_character_flag = quarter_high_elf } }
			set_character_flag = quarter_high_elf
		}
		if = {
			limit = { mother = { has_character_flag = quarter_blood_elf } }
			set_character_flag = quarter_blood_elf
		}
	}
	if = {
		limit = { mother = { trait = race_half_draenei } }
		set_character_flag = race_assigned
		add_trait = race_half_draenei
		if = {
			limit = { mother = { has_character_flag = quarter_orc } }
			set_character_flag = quarter_orc
		}
		if = {
			limit = { mother = { has_character_flag = quarter_draenei } }
			set_character_flag = quarter_draenei
		}
	}
	if = {
		limit = { mother = { trait = race_half_ogre } }
		set_character_flag = race_assigned
		add_trait = race_half_ogre
		if = {
			limit = { mother = { has_character_flag = quarter_orc } }
			set_character_flag = quarter_orc
		}
		if = {
			limit = { mother = { has_character_flag = quarter_ogre } }
			set_character_flag = quarter_ogre
		}
	}
	# For the few race traits with multiple GFXes
	if = {
		limit = { mother = { trait = race_orc } }
		set_character_flag = race_assigned
		add_trait = race_orc
		if = {
			limit = { mother = { trait = race_rorc } }
			add_trait = race_rorc
		}
		if = {
			limit = { mother = { trait = race_morc } }
			add_trait = race_morc
		}
		if = {
			limit = { mother = { trait = race_borc } }
			add_trait = race_borc
		}
		if = {
			limit = { mother = { trait = race_borc } }
			add_trait = race_borc
		}
		if = {
			limit = { mother = { trait = race_worc } }
			add_trait = race_worc
		}
		if = {
			limit = { mother = { trait = race_gorc } }
			add_trait = race_gorc
		}
		# Add more as needed
	}
	if = {
		limit = { mother = { trait = race_dwarf } }
		set_character_flag = race_assigned
		add_trait = race_dwarf
		if = {
			limit = { mother = { trait = race_blackdwarf } }
			add_trait = race_blackdwarf
		}
	}

	if = {
		limit = { mother = { trait = race_dragon } }
		set_character_flag = race_assigned
		add_trait = race_dragon
		if = {
			limit = { mother = { trait = race_bronzedragon } }
			add_trait = race_bronzedragon
		}
		if = {
			limit = { mother = { trait = race_reddragon } }
			add_trait = race_reddragon
		}
		if = {
			limit = { mother = { trait = race_blackdragon } }
			add_trait = race_blackdragon
		}
		if = {
			limit = { mother = { trait = race_bluedragon } }
			add_trait = race_bluedragon
		}
		if = {
			limit = { mother = { trait = race_greendragon } }
			add_trait = race_greendragon
		}
		if = {
			limit = { mother = { trait = race_infinitedragon } }
			add_trait = race_infinitedragon
		}
		if = {
			limit = { mother = { trait = race_nightdragon } }
			add_trait = race_nightdragon
		}
		# Add more as needed
	}
	if = {
		limit = { mother = { trait = fel_touched } }
		add_trait = fel_touched
	}
	if = {
		limit = { mother = { trait = fel_tainted } }
		add_trait = fel_tainted
		trigger_switch = {
			on_trigger = trait
			race_high_elf = {
				set_graphical_culture = blood_elven
			}
		}
	}
	if = {
		limit = { mother = { trait = fel_corrupted } }
		add_trait = fel_corrupted
	}
	if = {
		limit = { mother = { trait = felsworn } }
		add_trait = felsworn
	}
	# In case the flag hasn't been assigned
	if = {
		limit = {
			NOT = { has_character_flag = race_assigned }
		}
		TOW_initialize_character_race_from_culture = yes
		#log = " -- TOW -- : TOW_initialize_character_race_from_mother: Race not assigned for [This.GetBestName]. New race [This.TOW_GetFullRace] from culture [This.Culture.GetName]."
		mother = { log = " -- TOW -- : Mother Race : [This.TOW_GetFullRace]" }
	}
	mother = {
		PREV = {
			set_graphical_culture = PREV
		}
	}
}

TOW_remove_class_traits = {
	remove_trait = mage
	remove_trait = warlock
	remove_trait = necromancer
	remove_trait = priest
	remove_trait = shaman
	remove_trait = druid
	remove_trait = rogue
	remove_trait = ranger
	remove_trait = engineer
	remove_trait = warrior
	remove_trait = paladin
	remove_trait = monk
	remove_trait = death_knight
	remove_trait = demon_hunter
}

TOW_employed_remove_unwanted_traits_with_ET_employer = {
	if = {
		limit = { event_target:employer = { accepts_warlock = no } }
		remove_trait = warlock
	}
	if = {
		limit = { event_target:employer = { accepts_necromancer = no } }
		remove_trait = necromancer
	}
	if = {
		limit = { event_target:employer = { accepts_rogue = no } }
		remove_trait = rogue
	}
	remove_trait = demon_hunter
	remove_trait = death_knight
}

TOW_new_character_employed_effect = {
	Keitaro_remove_bad_traits = yes
	Keitaro_remove_lifestyle_traits = yes
	TOW_remove_class_traits = yes
	TOW_initialize_adult_character = yes
	TOW_employed_remove_unwanted_traits_with_ET_employer = yes
}

TOW_set_newly_landed_character_government = {
	set_government_type = feudal_government
}